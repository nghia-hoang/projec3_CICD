version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: destroy_environments
          when: on_fail
          command: |
             # Use the AWS CLI to delete the CloudFormation stacks
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              # exit 1

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   steps:
  #     - run:
  #         name: "Revert-migrations"
  #         when: on_fail
  #         command: |
  #           # Check if there was a successful migration
  #           curl -s $success_url | grep -q success
  #           if [[ $? == 0 ]]; then
  #             # Revert the migration
  #             cd ~/project/backend
  #             npm install
  #             # Add revert code here. You can find this in the Getting Started section.
  #             exit 1
  #           else
  #             # No need to revert the migration
  #             exit 0
  #           fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build-front-end"
          command: |
             cd frontend
             npm i
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Back-end-build"
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: "Run-frontend-test"
         command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run-Back-end-test"
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: "Run-frontend-scan"
         command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force 
            npm audit fix --force   
            npm audit --audit-level=critical       

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run-Back-end-scan"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical           

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm
      - run:
          name: "Ensure-back-end-infrastructure-exists"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              # exit 1
      - run:
          name: "Ensure-front-end-infrastructure-exist"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              # exit 1
      - run:
          name: "Add-back-end-ip-to-ansible-inventory "
          command: |
            # Fetch the public IP of the EC2 instance
            EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

            # Append the IP to the inventory.txt file
            echo $EC2_PUBLIC_IP >> ~/project/.circleci/ansible/inventory.txt
            # echo "your-instance-name ansible_host=$EC2_PUBLIC_IP ansible_user=ubuntu" >> .circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            # Persist the modified inventory file to the workspace
            # cp .circleci/ansible/inventory.txt $HOME/workspace/inventory.txt
            # # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - '3d:99:44:c0:05:26:94:b9:88:5f:27:e1:ca:f5:c7:e6'
      - attach_workspace:
          at: ~/
      - run:
          name: "Install-dependencies"
          command: |
            apk add openssh-client
            apk add --update ansible
      - run:
          name: "Configure-server"
          command: |
            # add environment variables to server
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations.txt        
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/6Gm7goALh7t85x6m4KcqvD/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
            # exit 1
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build
     # Here's where you will add some code to rollback on failure      
      - destroy-environment
     

  deploy-frontend:
    docker:
     - image: circleci/node:13.8.0
       user: root
    steps:
      - checkout
      # - run:
      #     name: install aws aws-cli
      #     command: |
      #       npm install -g aws-cli
      #       aws configure list
      - run:
          name: "Install-dependencies"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Get-backend-url"
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: "Deploy-frontend-objects"
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment       

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - circleci build step --timeout 1800 echo "This is a build step"
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '3d:99:44:c0:05:26:94:b9:88:5f:27:e1:ca:f5:c7:e6'
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          timeout: 1800
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
      # - destroy-environment

  # deploy-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - '3d:99:44:c0:05:26:94:b9:88:5f:27:e1:ca:f5:c7:e6'
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt -y update
  #           sudo apt install -y tar gzip curl unzip
  #           sudo apt install -y software-properties-common
  #           sudo apt install -y python3 python3-pip
  #           python3 -m pip install --user ansible
  #     - run:
  #         name: Install aws-cli
  #         command: |
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #     - restore_cache:
  #         keys: [backend-build]
  #     - attach_workspace:
  #         at: ~/      
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm i
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment
  
  # deploy-backend:
  #   docker:
  #    - image: circleci/node:13.8.0
  #   # env:
  #   #   CIRCLE_JOB_TIMEOUT: 10 
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: 
  #           - '3d:99:44:c0:05:26:94:b9:88:5f:27:e1:ca:f5:c7:e6'
  #     - run:
  #         name: "Install-dependencies"
  #         command: |
  #           # your code here
  #           # apk add --update ansible
  #           # apk add --update tar gzip curl
  #           # apk add --update openssh-client
  #           # apk add --update ansible curl rsync openssh nodejs npm
  #           # ansible --version
  #           # pip install awscli
  #           # aws --version
  #           # npm --version
  #           # node -v
  #           # apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
  #           sudo apt -y update
  #           sudo apt install -y tar gzip curl unzip
  #           sudo apt install -y software-properties-common
  #           sudo apt install -y python3 python3-pip
  #           python3 -m pip install --user ansible
  #     - run:
  #         name: "Install aws-cli"
  #         command: |
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install     
  #     - restore_cache:
  #         keys: [backend-build]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: "Deploy-backend"
  #         command: |
  #           # your code here
  #           cd backend
  #           npm i
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     # - destroy-environment   

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11  
    steps:
      - checkout
      - run:
          name: "Install-dependencies"
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: "Backend smoke test."
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: "Frontend-smoke-test."
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
             echo ${URL} 
             if curl -s ${URL} | grep "Welcome"
             then
                 return 1
             else
                 return 1
             fi
      - destroy-environment 
 
  # cloudfront-update:
  #   docker:
  #   #  - image: circleci/node:13.8.0 that supports AWS CLI
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Install-dependencies"
  #         command: |
  #           # your code here
  #     - run:
  #         name: "Update-cloudfront-distribution"
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
    #  - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Get-old-stack-workflow-id"
          command: |
            # your code here
            echo <<pipeline.parameters.workflow_id>>
            export OldWorkflowID=<<pipeline.parameters.workflow_id>>
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "----------cleaning up stacks------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]